#  TASK FIVE: STOCK MARKET ANALYSIS AND PREDICTION
# Analyze historical stock market data to identify trends, patterns, and correlations between stock prices. Apply time series analysis techniques to predict future stock prices using models like ARIMA or LSTM.


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import mean_squared_error
import warnings
warnings.filterwarnings('ignore')

# Load the dataset
file_path = 'D:\Documents\Downloads\stocks.csv'  # Update if necessary
data = pd.read_csv(file_path)

# Drop duplicate rows if any
data = data.drop_duplicates()

# Parse date column and set it as index (adjust column name if needed)
data['Date'] = pd.to_datetime(data['Date'])
data.set_index('Date', inplace=True)

# Visualize stock prices over time (adjust column name if needed)
plt.figure(figsize=(12, 6))
plt.plot(data['Close'], label='Close Price')
plt.title('Stock Prices Over Time')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.legend()
plt.show()

# Check for stationarity (Differencing if needed)
def check_stationarity(ts):
    from statsmodels.tsa.stattools import adfuller
    result = adfuller(ts)
    print("ADF Statistic:", result[0])
    print("p-value:", result[1])
    if result[1] <= 0.05:
        print("The time series is stationary.")
    else:
        print("The time series is not stationary.")

print("Checking stationarity of the time series...")
check_stationarity(data['Close'])

# Train-test split (last 20% for testing)
n = int(len(data) * 0.8)
train = data['Close'][:n]
test = data['Close'][n:]


# For LSTM modeling 
print("\nPreparing data for LSTM model...")
from sklearn.preprocessing import MinMaxScaler
from keras.models import Sequential
from keras.layers import LSTM, Dense

# Normalize data
scaler = MinMaxScaler()
data['Close_scaled'] = scaler.fit_transform(data[['Close']])

# Prepare sequences
def create_sequences(data, sequence_length):
    sequences = []
    targets = []
    for i in range(len(data) - sequence_length):
        seq = data[i:i + sequence_length]
        target = data[i + sequence_length]
        sequences.append(seq)
        targets.append(target)
    return np.array(sequences), np.array(targets)

sequence_length = 50
X, y = create_sequences(data['Close_scaled'].values, sequence_length)

# Train-test split
X_train, X_test = X[:n - sequence_length], X[n - sequence_length:]
y_train, y_test = y[:n - sequence_length], y[n - sequence_length:]

# Build LSTM model
model_lstm = Sequential([
    LSTM(50, return_sequences=True, input_shape=(X_train.shape[1], 1)),
    LSTM(50),
    Dense(1)
])
model_lstm.compile(optimizer='adam', loss='mean_squared_error')

# Train model
print("\nTraining LSTM model...")
model_lstm.fit(X_train, y_train, epochs=10, batch_size=32, verbose=1)

# Predict
predictions = model_lstm.predict(X_test)
predictions = scaler.inverse_transform(predictions)

# Evaluate and visualize LSTM predictions
plt.figure(figsize=(12, 6))
plt.plot(data.index[-len(predictions):], test, label='Actual', color='blue')
plt.plot(data.index[-len(predictions):], predictions, label='Predicted', color='red')
plt.title('LSTM Model: Actual vs Predicted Stock Prices')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.legend()
plt.show()

print("LSTM modeling completed.")
